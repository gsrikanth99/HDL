registrationDataDev.sources = rabbitmq_source1
registrationDataDev.channels = file_channel
registrationDataDev.sinks = sink_to_hdfs

# Define Rabbit Source
registrationDataDev.sources = rabbitmq_source1
registrationDataDev.sources.rabbitmq_source1.type = com.aweber.flume.source.rabbitmq.RabbitMQSource
registrationDataDev.sources.rabbitmq_source1.host = <hostname>
registrationDataDev.sources.rabbitmq_source1.queue = <queuename>
registrationDataDev.sources.rabbitmq_source1.username = <username>
registrationDataDev.sources.rabbitmq_source1.password = <password>
registrationDataDev.sources.rabbitmq_source1.port = <portno>
registrationDataDev.sources.rabbitmq_source1.virtual-host = /

registrationDataDev.sources.rabbitmq_source1.interceptors = customInterceptor
registrationDataDev.sources.rabbitmq_source1.interceptors.customInterceptor.type = AssetInterceptor.Asset.App$Builder

# HDFS sinks
registrationDataDev.sinks.sink_to_hdfs.type = hdfs
registrationDataDev.sinks.sink_to_hdfs.hdfs.fileType = DataStream
registrationDataDev.sinks.sink_to_hdfs.hdfs.path = <hdfsPath>/registrationdata
registrationDataDev.sinks.sink_to_hdfs.hdfs.filePrefix = registrationdata
registrationDataDev.sinks.sink_to_hdfs.hdfs.fileSuffix = .xml
#registrationDataDev.sinks.sink_to_hdfs.hdfs.batchSize = 1000
registrationDataDev.sinks.sink_to_hdfs.hdfs.rollSize=134217728
registrationDataDev.sinks.sink_to_hdfs.hdfs.rollCount=0
registrationDataDev.sinks.sink_to_hdfs.hdfs.rollInterval=1200

# Use a channel which buffers events in memory
registrationDataDev.channels.file_channel.type = file
registrationDataDev.channels.file_channel.checkpointDir = <configDir>/flume/checkpoint/registrationdata
registrationDataDev.channels.file_channel.dataDirs = <configDir>/flume/dataDir/registrationdata

# Bind the source and sink to the channel
registrationDataDev.sources.rabbitmq_source1.channels = file_channel
registrationDataDev.sinks.sink_to_hdfs.channel = file_channel
